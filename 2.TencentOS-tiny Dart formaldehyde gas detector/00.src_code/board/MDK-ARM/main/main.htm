<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [main\main.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image main\main.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Dec 03 22:05:27 2020
<BR><P>
<H3>Maximum Stack Usage =          0 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>

<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[57]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[27c]">putc_bfd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27c]">putc_bfd</a><BR>
 <LI><a href="#[3f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">BusFault_Handler</a><BR>
 <LI><a href="#[3d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">HardFault_Handler</a><BR>
 <LI><a href="#[3e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">MemManage_Handler</a><BR>
 <LI><a href="#[40]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">UsageFault_Handler</a><BR>
 <LI><a href="#[97]">knl_idle_entry</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[97]">knl_idle_entry</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[57]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3f]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[59]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5a]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5b]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[58]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[76]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[84]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[50]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[51]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[52]">DMA1_Channel3_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[53]">DMA1_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[54]">DMA1_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[55]">DMA1_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[56]">DMA1_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[71]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[72]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[73]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[74]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[75]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[79]">DMA2_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7a]">DMA2_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[42]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4b]">EXTI0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6b]">EXTI15_10_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4c]">EXTI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">EXTI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4e]">EXTI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4f]">EXTI4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5c]">EXTI9_5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[49]">FLASH_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[83]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[26]">Handle_Version_Info_Page_Left_Key</a> from version_info_ui.o(i.Handle_Version_Info_Page_Left_Key) referenced 2 times from version_info_ui.o(.data)
 <LI><a href="#[27]">Handle_Version_Info_Page_Left_Long_Key</a> from version_info_ui.o(i.Handle_Version_Info_Page_Left_Long_Key) referenced 2 times from version_info_ui.o(.data)
 <LI><a href="#[28]">Handle_Version_Info_Page_Right_Key</a> from version_info_ui.o(i.Handle_Version_Info_Page_Right_Key) referenced 2 times from version_info_ui.o(.data)
 <LI><a href="#[1e]">Handler_Log_Page_Left_Key</a> from log_ui.o(i.Handler_Log_Page_Left_Key) referenced 2 times from log_ui.o(.data)
 <LI><a href="#[1f]">Handler_Log_Page_Right_Key</a> from log_ui.o(i.Handler_Log_Page_Right_Key) referenced 2 times from log_ui.o(.data)
 <LI><a href="#[20]">Handler_Log_Page_Right_Long_Key</a> from log_ui.o(i.Handler_Log_Page_Right_Long_Key) referenced 2 times from log_ui.o(.data)
 <LI><a href="#[25]">Handler_Main_Page_Right_Key</a> from main_ui.o(i.Handler_Main_Page_Right_Key) referenced 2 times from main_ui.o(.data)
 <LI><a href="#[3d]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[63]">I2C1_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[62]">I2C1_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[65]">I2C2_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[64]">I2C2_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7e]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7d]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[15]">LCD_Clear</a> from lcd_spi2_drv.o(i.LCD_Clear) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[16]">LCD_DisplayOnoff</a> from lcd_spi2_drv.o(i.LCD_DisplayOnoff) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[18]">LCD_Draw_ColorLine</a> from lcd_spi2_drv.o(i.LCD_Draw_ColorLine) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[19]">LCD_Draw_ColorRect</a> from lcd_spi2_drv.o(i.LCD_Draw_ColorRect) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[17]">LCD_Fill</a> from lcd_spi2_drv.o(i.LCD_Fill) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[14]">LCD_Init</a> from lcd_spi2_drv.o(i.LCD_Init) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[1c]">LCD_ShowCharStr</a> from lcd_spi2_drv.o(i.LCD_ShowCharStr) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[1b]">LCD_ShowChinese</a> from lcd_spi2_drv.o(i.LCD_ShowChinese) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[1a]">LCD_Show_Image</a> from lcd_spi2_drv.o(i.LCD_Show_Image) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[77]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[78]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7b]">LPUART1_IRQHandler</a> from stm32l4xx_it.o(i.LPUART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1d]">Lcd_show_bmp</a> from bsp_bmp.o(i.Lcd_show_bmp) referenced 2 times from lcd_device.o(.data)
 <LI><a href="#[3e]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3c]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[46]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[21]">Para_Setting_Page_Left_Key</a> from para_ui.o(i.Para_Setting_Page_Left_Key) referenced 2 times from para_ui.o(.data)
 <LI><a href="#[22]">Para_Setting_Page_Left_Long_Key</a> from para_ui.o(i.Para_Setting_Page_Left_Long_Key) referenced 2 times from para_ui.o(.data)
 <LI><a href="#[23]">Para_Setting_Page_Right_Key</a> from para_ui.o(i.Para_Setting_Page_Right_Key) referenced 2 times from para_ui.o(.data)
 <LI><a href="#[24]">Para_Setting_Page_Right_Long_Key</a> from para_ui.o(i.Para_Setting_Page_Right_Long_Key) referenced 2 times from para_ui.o(.data)
 <LI><a href="#[43]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7c]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4a]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[82]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6c]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[48]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3b]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7f]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6d]">SDMMC1_IRQHandler</a> from stm32l4xx_it.o(i.SDMMC1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8d]">SD_DMARxAbort</a> from stm32l4xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[8c]">SD_DMATxAbort</a> from stm32l4xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[a0]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[a4]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[a2]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[a1]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[a3]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[66]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[67]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6e]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[41]">SVC_Handler</a> from stm32l4xx_it.o(i.SVC_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[80]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[9b]">StartKeyTask</a> from app_init.o(i.StartKeyTask) referenced from app_init.o(.constdata)
 <LI><a href="#[9f]">StartNetWorkTask</a> from app_init.o(i.StartNetWorkTask) referenced from app_init.o(.constdata)
 <LI><a href="#[9e]">StartSensor_Task</a> from app_init.o(i.StartSensor_Task) referenced from app_init.o(.constdata)
 <LI><a href="#[9d]">StartStatus_Bar_Task</a> from app_init.o(i.StartStatus_Bar_Task) referenced from app_init.o(.constdata)
 <LI><a href="#[9c]">StartUartRecvTask</a> from app_init.o(i.StartUartRecvTask) referenced from app_init.o(.constdata)
 <LI><a href="#[44]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[86]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[47]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5d]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[60]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5f]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5e]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[61]">TIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6f]">TIM6_DAC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[70]">TIM7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[81]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8e]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[91]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[8f]">UART_DMAReceiveCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[90]">UART_DMARxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[93]">UART_RxISR_16BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[92]">UART_RxISR_8BIT</a> from stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[68]">USART1_IRQHandler</a> from stm32l4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[69]">USART2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[6a]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[40]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[45]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[87]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[35]">_list</a> from cmd.o(i._list) referenced 2 times from cmd.o(CMDS)
 <LI><a href="#[89]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[8a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[88]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[95]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[95]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[96]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[98]">at_parser</a> from tos_at.o(i.at_parser) referenced from tos_at.o(i.tos_at_init)
 <LI><a href="#[3]">conf_page_process</a> from conf_ui.o(i.conf_page_process) referenced 2 times from menu.o(.data)
 <LI><a href="#[36]">cpu_reset_process</a> from app_init.o(i.cpu_reset_process) referenced 2 times from app_init.o(CMDS)
 <LI><a href="#[8]">datetime_page_process</a> from datetime_ui.o(i.datetime_page_process) referenced 2 times from menu.o(.data)
 <LI><a href="#[9a]">default_task</a> from app_init.o(i.default_task) referenced from app_init.o(.constdata)
 <LI><a href="#[34]">esp8266_close</a> from esp8266.o(i.esp8266_close) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[2d]">esp8266_connect</a> from esp8266.o(i.esp8266_connect) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[2a]">esp8266_incoming_data_process</a> from esp8266.o(i.esp8266_incoming_data_process) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[2b]">esp8266_init</a> from esp8266.o(i.esp8266_init) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[2c]">esp8266_parse_domain</a> from esp8266.o(i.esp8266_parse_domain) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[30]">esp8266_recv</a> from esp8266.o(i.esp8266_recv) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[2f]">esp8266_recv_timeout</a> from esp8266.o(i.esp8266_recv_timeout) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[32]">esp8266_recvfrom</a> from esp8266.o(i.esp8266_recvfrom) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[33]">esp8266_recvfrom_timeout</a> from esp8266.o(i.esp8266_recvfrom_timeout) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[2e]">esp8266_send</a> from esp8266.o(i.esp8266_send) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[31]">esp8266_sendto</a> from esp8266.o(i.esp8266_sendto) referenced 2 times from esp8266.o(.data)
 <LI><a href="#[94]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0fprintf)
 <LI><a href="#[94]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[29]">get_formaldehyde_sensor_value</a> from logic.o(i.get_formaldehyde_sensor_value) referenced 2 times from logic.o(.data)
 <LI><a href="#[39]">get_sensor_data</a> from app_init.o(i.get_sensor_data) referenced 2 times from app_init.o(CMDS)
 <LI><a href="#[3a]">get_system_version</a> from app_init.o(i.get_system_version) referenced 2 times from app_init.o(CMDS)
 <LI><a href="#[8b]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[97]">knl_idle_entry</a> from tos_sys.o(i.knl_idle_entry) referenced from tos_sys.o(i.knl_idle_init)
 <LI><a href="#[b]">lcd_clear</a> from lcd_driver.o(i.lcd_clear) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[c]">lcd_display_onoff</a> from lcd_driver.o(i.lcd_display_onoff) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[e]">lcd_draw_line</a> from lcd_driver.o(i.lcd_draw_line) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[f]">lcd_draw_rect</a> from lcd_driver.o(i.lcd_draw_rect) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[d]">lcd_fill</a> from lcd_driver.o(i.lcd_fill) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[a]">lcd_init</a> from lcd_driver.o(i.lcd_init) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[12]">lcd_show_ascii_str</a> from lcd_driver.o(i.lcd_show_ascii_str) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[13]">lcd_show_bmp</a> from lcd_driver.o(i.lcd_show_bmp) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[11]">lcd_show_chinese_str</a> from lcd_driver.o(i.lcd_show_chinese_str) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[10]">lcd_show_image</a> from lcd_driver.o(i.lcd_show_image) referenced 2 times from lcd_driver.o(.data)
 <LI><a href="#[38]">led_off_process</a> from app_init.o(i.led_off_process) referenced 2 times from app_init.o(CMDS)
 <LI><a href="#[37]">led_on_process</a> from app_init.o(i.led_on_process) referenced 2 times from app_init.o(CMDS)
 <LI><a href="#[2]">log_page_process</a> from log_ui.o(i.log_page_process) referenced 2 times from menu.o(.data)
 <LI><a href="#[85]">main</a> from app_init.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1]">main_page_process</a> from main_ui.o(i.main_page_process) referenced 2 times from menu.o(.data)
 <LI><a href="#[4]">para_setting_page_process</a> from para_ui.o(i.para_setting_page_process) referenced 2 times from menu.o(.data)
 <LI><a href="#[7]">password_input_page_process</a> from password_ui.o(i.password_input_page_process) referenced 2 times from menu.o(.data)
 <LI><a href="#[6]">password_page_process</a> from password_ui.o(i.password_page_process) referenced 2 times from menu.o(.data)
 <LI><a href="#[9]">recovery_page_process</a> from recovery_ui.o(i.recovery_page_process) referenced 2 times from menu.o(.data)
 <LI><a href="#[99]">task_exit</a> from tos_task.o(i.task_exit) referenced from tos_task.o(i.tos_task_create)
 <LI><a href="#[5]">version_info_page_process</a> from version_info_ui.o(i.version_info_page_process) referenced 2 times from menu.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[87]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2fc]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[2fb]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[2fa]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[22b]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[225]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[229]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[43]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, uldiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[aa]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstrip
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[8b]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isspace_o.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2db]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlwc
</UL>

<P><STRONG><a name="[16a]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, memmovea.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_item_display
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_double
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xstrdup
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUartRecvTask
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memmovea.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_version_info
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_password_item
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_number_display
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_item_display
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_error_display
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status2_font
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status1_font
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_item_font
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_datetime
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_datatime_item
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_datetime
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tecent_logo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time_font
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_font_and_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensivity_display
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_conf_item
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_serial_number
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_result
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_datetime
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
</UL>

<P><STRONG><a name="[2dc]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memmovea.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstrip
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_version_info
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUartRecvTask
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_version_info
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_work_status
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tecent_logo
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_value
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_unit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_min_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_max_value
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_datetime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUartRecvTask
</UL>

<P><STRONG><a name="[ad]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[19e]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_Packet_Send
</UL>

<P><STRONG><a name="[1a9]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, strstr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_is_link_broken
</UL>

<P><STRONG><a name="[30f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strncpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[289]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getsecname
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getnsec
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
</UL>

<P><STRONG><a name="[195]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_hash
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xstrdup
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dumpsection_ini
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstrip
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_Packet_Send
</UL>

<P><STRONG><a name="[23d]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, strcmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_get
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
</UL>

<P><STRONG><a name="[28c]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
</UL>

<P><STRONG><a name="[1f9]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, strncmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dumpsection_ini
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
</UL>

<P><STRONG><a name="[ae]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, calloc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_double
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_new
</UL>

<P><STRONG><a name="[b0]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, __0sscanf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
</UL>

<P><STRONG><a name="[c8]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, _scanf_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[b2]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, strtol.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getint
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[b5]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, atoi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, ddiv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dart_Sensor_Density
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dfltui.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dart_Sensor_Density
</UL>

<P><STRONG><a name="[192]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_work_status
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_value
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_min_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_max_value
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensivity_display
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, d2f.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dart_Sensor_Density
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[b1]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[88]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, _strtoul.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c0]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, strtod.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[bb]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[b7]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, depilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, depilogue.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1e8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a6]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bd]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[bc]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 0 bytes, _scanf.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[bf]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, scanf_fp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[cb]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 0 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[85]"></a>main</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, app_init.o(i.$Sub$$main))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDMMC1_SD_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Config_ini_File
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Register_Driver_Model
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mount_SD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[128]"></a>BSP_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>

<P><STRONG><a name="[df]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[e1]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>

<P><STRONG><a name="[e3]"></a>BSP_SD_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[e4]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[e6]"></a>BSP_SD_ReadBlocks</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[13e]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_ReadCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[e8]"></a>BSP_SD_WriteBlocks</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[13f]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_WriteCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[3f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>Dart_Sensor_Data_Parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, dart_sensor.o(i.Dart_Sensor_Data_Parse))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dart_Sensor_Density
</UL>

<P><STRONG><a name="[42]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[166]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[197]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[f7]"></a>GetKey</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, key.o(i.GetKey))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F1
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartKeyTask
</UL>

<P><STRONG><a name="[fa]"></a>Get_Dart_Sensor_Density</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, dart_sensor.o(i.Get_Dart_Sensor_Density))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dart_Sensor_Data_Parse
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formaldehyde_sensor_value
</UL>

<P><STRONG><a name="[fc]"></a>Get_Date_Time</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rtc.o(i.Get_Date_Time))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Date_Time
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStatus_Bar_Task
</UL>

<P><STRONG><a name="[ff]"></a>Get_RTC_Date_Time</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main_ui.o(i.Get_RTC_Date_Time))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Date_Time
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_init
</UL>

<P><STRONG><a name="[101]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 958 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOffsetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetChannelSamplingTime
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_GetOffsetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[107]"></a>HAL_ADC_Init</STRONG> (Thumb, 396 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_INJ_IsConversionOngoing
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[108]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[152]"></a>HAL_DMA_Abort</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[132]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[153]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[ef]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[10b]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[dc]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_run_cfg_script
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[10a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 412 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
</UL>

<P><STRONG><a name="[17e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F1
</UL>

<P><STRONG><a name="[da]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_2Byte
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Image
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorLine
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOnoff
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on_process
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off_process
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>HAL_InitTick</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[110]"></a>HAL_MspInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[164]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[13a]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[112]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[10e]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2ce]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[114]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 786 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_GetSAIxPeriphCLKFreq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[119]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 682 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[118]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[116]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[117]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1382 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[fe]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Date_Time
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Date_Time
</UL>

<P><STRONG><a name="[11f]"></a>HAL_RTC_Init</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
</UL>

<P><STRONG><a name="[125]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
</UL>

<P><STRONG><a name="[126]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[127]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[12e]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 402 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[e0]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[e2]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[12b]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 496 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>HAL_SD_Init</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_SD_InitCard</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_SD_MspInit</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, sdmmc.o(i.HAL_SD_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[e7]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 468 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_ReadBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
</UL>

<P><STRONG><a name="[12f]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 422 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.HAL_SD_WriteBlocks))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
</UL>

<P><STRONG><a name="[142]"></a>HAL_SPI_Init</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[143]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[199]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[144]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[145]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[147]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[148]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[15b]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[151]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Register
</UL>

<P><STRONG><a name="[156]"></a>HAL_UART_DeInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_deinit
</UL>

<P><STRONG><a name="[158]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[15a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 348 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[157]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_deinit
</UL>

<P><STRONG><a name="[15e]"></a>HAL_UART_MspInit</STRONG> (Thumb, 312 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formaldehyde_sensor_value
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Register
</UL>

<P><STRONG><a name="[159]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_recv_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUartRecvTask
</UL>

<P><STRONG><a name="[168]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_input_byte
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[16d]"></a>HAL_UART_Transmit</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_write
</UL>

<P><STRONG><a name="[15c]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1e]"></a>Handler_Log_Page_Left_Key</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, log_ui.o(i.Handler_Log_Page_Left_Key))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_serial_number
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_result
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_datetime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_ui.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>Handler_Log_Page_Right_Key</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, log_ui.o(i.Handler_Log_Page_Right_Key))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_serial_number
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_result
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_datetime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_ui.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>Handler_Log_Page_Right_Long_Key</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, log_ui.o(i.Handler_Log_Page_Right_Long_Key))
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_item_display
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_no_log
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_serial_number
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_result
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_datetime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> log_ui.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>Key_F1</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, key.o(i.Key_F1))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[f9]"></a>Key_F2</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, key.o(i.Key_F2))
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[17f]"></a>LCD_Address_Set</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Address_Set))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Image
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese32x32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese24x24
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese16x16
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorLine
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[15]"></a>LCD_Clear</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Clear))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>LCD_DisplayOnoff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_DisplayOnoff))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>LCD_Draw_ColorLine</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Draw_ColorLine))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorRect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[183]"></a>LCD_Draw_ColorPoint</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Draw_ColorPoint))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_2Byte
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese32x32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese24x24
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese16x16
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorLine
</UL>

<P><STRONG><a name="[19]"></a>LCD_Draw_ColorRect</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Draw_ColorRect))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>LCD_Fill</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Fill))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>LCD_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Init))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_run_cfg_script
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[187]"></a>LCD_OpenWindow</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_OpenWindow))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
</UL>

<P><STRONG><a name="[188]"></a>LCD_ShowChar</STRONG> (Thumb, 260 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_ShowChar))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_2Byte
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowCharStr
</UL>

<P><STRONG><a name="[1c]"></a>LCD_ShowCharStr</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_ShowCharStr))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>LCD_ShowChinese</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_ShowChinese))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese32x32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese24x24
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese16x16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[18a]"></a>LCD_ShowChinese16x16</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_ShowChinese16x16))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[18b]"></a>LCD_ShowChinese24x24</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_ShowChinese24x24))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[189]"></a>LCD_ShowChinese32x32</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_ShowChinese32x32))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
</UL>

<P><STRONG><a name="[1a]"></a>LCD_Show_Image</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Show_Image))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tecent_logo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[184]"></a>LCD_Write_2Byte</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Write_2Byte))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorPoint
</UL>

<P><STRONG><a name="[180]"></a>LCD_Write_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Write_Cmd))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OpenWindow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_run_cfg_script
</UL>

<P><STRONG><a name="[181]"></a>LCD_Write_Data</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_Write_Data))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese32x32
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese24x24
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese16x16
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OpenWindow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Address_Set
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_run_cfg_script
</UL>

<P><STRONG><a name="[7b]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.LPUART1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Lcd_show_bmp</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, bsp_bmp.o(i.Lcd_show_bmp))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_2Byte
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_OpenWindow
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd_device.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>Load_Config_ini_File</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, para.o(i.Load_Config_ini_File))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Default_InI_File
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>MX_ADC1_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>MX_DMA_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Register
</UL>

<P><STRONG><a name="[d6]"></a>MX_FATFS_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>MX_GPIO_Init</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, usart.o(i.MX_LPUART1_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
</UL>

<P><STRONG><a name="[d2]"></a>MX_RTC_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>MX_SDMMC1_SD_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdmmc.o(i.MX_SDMMC1_SD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>MX_SPI2_Init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, spi.o(i.MX_SPI2_Init))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>MX_TIM16_Init</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, tim.o(i.MX_TIM16_Init))
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Register
</UL>

<P><STRONG><a name="[3e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>Menu_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menu_ui.o(i.Menu_Init))
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>Menu_Select_Item</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, menu.o(i.Menu_Select_Item))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartKeyTask
</UL>

<P><STRONG><a name="[d8]"></a>Mount_SD</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, filesystem.o(i.Mount_SD))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>OneNet_Packet_Send</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, app_init.o(i.OneNet_Packet_Send))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_SendData
</UL>

<P><STRONG><a name="[1a0]"></a>OneNet_SendData</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_init.o(i.OneNet_SendData))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_Packet_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[21]"></a>Para_Setting_Page_Left_Key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, para_ui.o(i.Para_Setting_Page_Left_Key))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_next_para_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> para_ui.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>Para_Setting_Page_Left_Long_Key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, para_ui.o(i.Para_Setting_Page_Left_Long_Key))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_save_and_return_prev_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> para_ui.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>Para_Setting_Page_Right_Key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, para_ui.o(i.Para_Setting_Page_Right_Key))
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_current_select_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> para_ui.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>Para_Setting_Page_Right_Long_Key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, para_ui.o(i.Para_Setting_Page_Right_Long_Key))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_save_and_return_prev_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> para_ui.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[124]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[121]"></a>RTC_EnterInitMode</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[122]"></a>RTC_ExitInitMode</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1a5]"></a>RTC_Set_Date</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtc.o(i.RTC_Set_Date))
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_process
</UL>

<P><STRONG><a name="[1a6]"></a>RTC_Set_Time</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtc.o(i.RTC_Set_Time))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_process
</UL>

<P><STRONG><a name="[172]"></a>ReadlLineData</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, filesystem.o(i.ReadlLineData))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_page_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Key
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Left_Key
</UL>

<P><STRONG><a name="[1aa]"></a>Recovery_Setting</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, filesystem.o(i.Recovery_Setting))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
</UL>

<P><STRONG><a name="[d7]"></a>Register_Driver_Model</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_driver_frame.o(i.Register_Driver_Model))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SDMMC1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1af]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp3
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[139]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1b1]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1b2]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp7
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[13c]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[13d]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[1b4]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1b5]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[1b7]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp2
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[129]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[1b8]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[12d]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[140]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[141]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_SendCommand
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[13b]"></a>SDMMC_ConfigData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[1ae]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[1b6]"></a>SDMMC_GetCmdResp2</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp2))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
</UL>

<P><STRONG><a name="[1b0]"></a>SDMMC_GetCmdResp3</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp3))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
</UL>

<P><STRONG><a name="[1b9]"></a>SDMMC_GetCmdResp6</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp6))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
</UL>

<P><STRONG><a name="[1b3]"></a>SDMMC_GetCmdResp7</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp7))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
</UL>

<P><STRONG><a name="[1bb]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[12a]"></a>SDMMC_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp6
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>

<P><STRONG><a name="[135]"></a>SDMMC_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitCard
</UL>

<P><STRONG><a name="[136]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_PowerState_ON))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[12c]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[1ad]"></a>SDMMC_SendCommand</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[131]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_ll_sdmmc.o(i.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[a0]"></a>SD_initialize</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>SD_ioctl</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>SD_read</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>SD_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_CheckStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>SD_write</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>Sensor_Register</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, logic.o(i.Sensor_Register))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSensor_Task
</UL>

<P><STRONG><a name="[9b]"></a>StartKeyTask</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_init.o(i.StartKeyTask))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Select_Item
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>StartNetWorkTask</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, app_init.o(i.StartNetWorkTask))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_ms
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sal_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_join_ap
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_wlan_status
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_SendData
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>StartSensor_Task</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, app_init.o(i.StartSensor_Task))
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Register
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_work_status
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_value
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_min_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_max_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>StartStatus_Bar_Task</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, app_init.o(i.StartStatus_Bar_Task))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Date_Time
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time_font
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_ms
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>StartUartRecvTask</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, app_init.o(i.StartUartRecvTask))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parsing
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>SysTick_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>SystemClock_Config</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[14a]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[160]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[161]"></a>UART_CheckIdleState</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15f]"></a>UART_SetConfig</STRONG> (Thumb, 484 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[16e]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[68]"></a>USART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USART3_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d5]"></a>User_Para_Save_Process</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, para.o(i.User_Para_Save_Process))
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Config_ini_File
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_freedict
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dump_ini
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_device_password
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_value
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_sensivity
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_network
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_alarm
</UL>

<P><STRONG><a name="[1d8]"></a>Version_Info_Page_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, version_info_ui.o(i.Version_Info_Page_Init))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_version_info
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_conf_item
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_process
</UL>

<P><STRONG><a name="[1d9]"></a>__0fprintf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i.__0fprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ec]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0fprintf))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Default_InI_File
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
</UL>

<P><STRONG><a name="[1db]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0printf))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Config_ini_File
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_value
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_sensivity
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_network
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_alarm
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Info_Page_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_process
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recovery_Setting
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_version
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_data
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_reset_process
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUartRecvTask
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_Packet_Send
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[1dc]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[220]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dumpsection_ini
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[1dd]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_version_info
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_device_password
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_password_item
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_number_display
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_datetime
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_datatime_item
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_datetime
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_work_status
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tecent_logo
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_value
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_unit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_min_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_max_value
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Date_Time
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_value
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_sensivity
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_network
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_alarm
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensivity_display
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_serial_number
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_datetime
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStatus_Bar_Task
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_Packet_Send
</UL>

<P><STRONG><a name="[1de]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f5]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1e2]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getdouble
</UL>

<P><STRONG><a name="[1e3]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[1e4]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[cc]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1ed]"></a>alarm_status_display</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, para_ui.o(i.alarm_status_display))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_para_setting_page_status_font
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_current_select_item
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_para_item
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
</UL>

<P><STRONG><a name="[214]"></a>clock_item_display</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, datetime_ui.o(i.clock_item_display))
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_datetime
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_process
</UL>

<P><STRONG><a name="[1c6]"></a>close</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tos_at_socket.o(i.close))
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_close
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_set_sanity_check
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_sanity_check
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_free
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_get_fd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[1cc]"></a>cmd_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cmd.o(i.cmd_init))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_next_cmd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUartRecvTask
</UL>

<P><STRONG><a name="[1ce]"></a>cmd_parsing</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, cmd.o(i.cmd_parsing))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_next_cmd
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_to_lower
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUartRecvTask
</UL>

<P><STRONG><a name="[3]"></a>conf_page_process</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, conf_ui.o(i.conf_page_process))
<BR><BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_conf_item
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_conf_item
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[170]"></a>conf_page_ui_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, conf_ui.o(i.conf_page_ui_init))
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_conf_item
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Version_Info_Page_Right_Key
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Version_Info_Page_Left_Key
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_save_and_return_prev_page
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Long_Key
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_process
</UL>

<P><STRONG><a name="[1c5]"></a>connect</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tos_at_socket.o(i.connect))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_connect
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_set_fd
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_sanity_check
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_get_protocol
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[224]"></a>cpu_context_switch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_context_switch))
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[226]"></a>cpu_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_init))
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[228]"></a>cpu_irq_context_switch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_irq_context_switch))
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[36]"></a>cpu_reset_process</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_init.o(i.cpu_reset_process))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(CMDS)
</UL>
<P><STRONG><a name="[22a]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_sched_start))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[227]"></a>cpu_systick_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_systick_init))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[30e]"></a>cpu_task_stk_init</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_task_stk_init))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[235]"></a>datetime_page_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, datetime_ui.o(i.datetime_page_init))
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_item_display
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_conf_item
</UL>

<P><STRONG><a name="[8]"></a>datetime_page_process</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, datetime_ui.o(i.datetime_page_process))
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_datetime
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_next_item
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_item_display
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>default_task</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, app_init.o(i.default_task))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(.constdata)
</UL>
<P><STRONG><a name="[23a]"></a>dictionary_del</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, dictionary.o(i.dictionary_del))
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_freedict
</UL>

<P><STRONG><a name="[23b]"></a>dictionary_get</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, dictionary.o(i.dictionary_get))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_hash
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getstring
</UL>

<P><STRONG><a name="[23c]"></a>dictionary_hash</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dictionary.o(i.dictionary_hash))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_set
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_get
</UL>

<P><STRONG><a name="[23e]"></a>dictionary_new</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, dictionary.o(i.dictionary_new))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
</UL>

<P><STRONG><a name="[23f]"></a>dictionary_set</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, dictionary.o(i.dictionary_set))
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_hash
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_double
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xstrdup
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
</UL>

<P><STRONG><a name="[281]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[2dd]"></a>disk_ioctl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[270]"></a>disk_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_read))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[280]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[26f]"></a>disk_write</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, diskio.o(i.disk_write))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[215]"></a>display_datetime</STRONG> (Thumb, 472 bytes, Stack size 0 bytes, datetime_ui.o(i.display_datetime))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_item_display
</UL>

<P><STRONG><a name="[24f]"></a>display_font_and_value</STRONG> (Thumb, 364 bytes, Stack size 0 bytes, main_ui.o(i.display_font_and_value))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_work_status
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tecent_logo
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_value
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_unit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_min_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_max_value
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_main_page_ui
</UL>

<P><STRONG><a name="[1ca]"></a>display_hcho_max_value</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, main_ui.o(i.display_hcho_max_value))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_font_and_value
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSensor_Task
</UL>

<P><STRONG><a name="[1cb]"></a>display_hcho_min_value</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, main_ui.o(i.display_hcho_min_value))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_font_and_value
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSensor_Task
</UL>

<P><STRONG><a name="[250]"></a>display_hcho_unit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main_ui.o(i.display_hcho_unit))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_font_and_value
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
</UL>

<P><STRONG><a name="[1c9]"></a>display_hcho_value</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, main_ui.o(i.display_hcho_value))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_font_and_value
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSensor_Task
</UL>

<P><STRONG><a name="[179]"></a>display_main_page_ui</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main_ui.o(i.display_main_page_ui))
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_rect_func
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_font_and_value
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Main_Page_Right_Key
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_init
</UL>

<P><STRONG><a name="[f1]"></a>display_menu_color_item</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, menu_ui.o(i.display_menu_color_item))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_item_display
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_error_display
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status2_font
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status1_font
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_item_font
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_item_display
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_para_setting_page_status_font
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_para_setting_page_item_font
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_conf_item
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_process
</UL>

<P><STRONG><a name="[177]"></a>display_no_log</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, log_ui.o(i.display_no_log))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_page_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Long_Key
</UL>

<P><STRONG><a name="[17b]"></a>display_runing_time</STRONG> (Thumb, 246 bytes, Stack size 0 bytes, main_ui.o(i.display_runing_time))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Main_Page_Right_Key
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStatus_Bar_Task
</UL>

<P><STRONG><a name="[17a]"></a>display_runing_time_font</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main_ui.o(i.display_runing_time_font))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Main_Page_Right_Key
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStatus_Bar_Task
</UL>

<P><STRONG><a name="[251]"></a>display_tecent_logo</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, main_ui.o(i.display_tecent_logo))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Image
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_font_and_value
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
</UL>

<P><STRONG><a name="[16f]"></a>display_version_info</STRONG> (Thumb, 274 bytes, Stack size 0 bytes, version_info_ui.o(i.display_version_info))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Version_Info_Page_Right_Key
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Version_Info_Page_Left_Long_Key
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Version_Info_Page_Left_Key
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Info_Page_Init
</UL>

<P><STRONG><a name="[1c2]"></a>display_wlan_status</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, app_init.o(i.display_wlan_status))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[1c8]"></a>display_work_status</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, main_ui.o(i.display_work_status))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_font_and_value
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSensor_Task
</UL>

<P><STRONG><a name="[252]"></a>draw_rect_func</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, main_ui.o(i.draw_rect_func))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_main_page_ui
</UL>

<P><STRONG><a name="[21f]"></a>enter_conf_item</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, conf_ui.o(i.enter_conf_item))
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_setting_page_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Info_Page_Init
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_conf_item
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_page_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_process
</UL>

<P><STRONG><a name="[1c1]"></a>esp8266_join_ap</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_join_ap))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[1c0]"></a>esp8266_sal_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_sal_init))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_register
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[ee]"></a>f_close</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff.o(i.f_close))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Default_InI_File
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
</UL>

<P><STRONG><a name="[1a8]"></a>f_gets</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ff.o(i.f_gets))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
</UL>

<P><STRONG><a name="[18d]"></a>f_lseek</STRONG> (Thumb, 530 bytes, Stack size 0 bytes, ff.o(i.f_lseek))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
</UL>

<P><STRONG><a name="[19c]"></a>f_mount</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mount_SD
</UL>

<P><STRONG><a name="[eb]"></a>f_open</STRONG> (Thumb, 528 bytes, Stack size 0 bytes, ff.o(i.f_open))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Default_InI_File
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
</UL>

<P><STRONG><a name="[ed]"></a>f_printf</STRONG> (Thumb, 460 bytes, Stack size 0 bytes, ff.o(i.f_printf))
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Default_InI_File
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dumpsection_ini
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dump_ini
</UL>

<P><STRONG><a name="[18c]"></a>f_read</STRONG> (Thumb, 338 bytes, Stack size 0 bytes, ff.o(i.f_read))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
</UL>

<P><STRONG><a name="[26b]"></a>f_sync</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, ff.o(i.f_sync))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1ab]"></a>f_unlink</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, ff.o(i.f_unlink))
<BR><BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recovery_Setting
</UL>

<P><STRONG><a name="[27f]"></a>f_write</STRONG> (Thumb, 398 bytes, Stack size 0 bytes, ff.o(i.f_write))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_flush
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[232]"></a>ff_convert</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cc936.o(i.ff_convert))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[21c]"></a>ff_wtoupper</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[282]"></a>find_max_value</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, logic.o(i.find_max_value))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formaldehyde_sensor_value
</UL>

<P><STRONG><a name="[283]"></a>find_min_value</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, logic.o(i.find_min_value))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formaldehyde_sensor_value
</UL>

<P><STRONG><a name="[94]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0fprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[1a7]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, malloc.o(i.free))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_double
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_set
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_del
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getstring
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dumpsection_ini
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
</UL>

<P><STRONG><a name="[276]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[29]"></a>get_formaldehyde_sensor_value</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, logic.o(i.get_formaldehyde_sensor_value))
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_min_value
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_max_value
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Dart_Sensor_Density
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>get_sensor_data</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_init.o(i.get_sensor_data))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(CMDS)
</UL>
<P><STRONG><a name="[3a]"></a>get_system_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_init.o(i.get_system_version))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(CMDS)
</UL>
<P><STRONG><a name="[1c3]"></a>inet_addr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_at_socket_lib.o(i.inet_addr))
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[284]"></a>inet_aton</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, tos_at_socket_lib.o(i.inet_aton))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
</UL>

<P><STRONG><a name="[1d6]"></a>iniparser_dump_ini</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_dump_ini))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getsecname
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getnsec
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dumpsection_ini
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
</UL>

<P><STRONG><a name="[287]"></a>iniparser_dumpsection_ini</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_dumpsection_ini))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_find_entry
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dump_ini
</UL>

<P><STRONG><a name="[288]"></a>iniparser_find_entry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_find_entry))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getstring
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dumpsection_ini
</UL>

<P><STRONG><a name="[1d7]"></a>iniparser_freedict</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_freedict))
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_del
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
</UL>

<P><STRONG><a name="[191]"></a>iniparser_getdouble</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_getdouble))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getstring
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
</UL>

<P><STRONG><a name="[190]"></a>iniparser_getint</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_getint))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getstring
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_value
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_sensivity
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_network
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_alarm
</UL>

<P><STRONG><a name="[285]"></a>iniparser_getnsec</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_getnsec))
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dump_ini
</UL>

<P><STRONG><a name="[286]"></a>iniparser_getsecname</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_getsecname))
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dump_ini
</UL>

<P><STRONG><a name="[194]"></a>iniparser_getstring</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_getstring))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xstrdup
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_get
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlwc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getint
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getdouble
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_find_entry
</UL>

<P><STRONG><a name="[18e]"></a>iniparser_load</STRONG> (Thumb, 582 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_load))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xstrdup
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_set
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_new
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_del
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Config_ini_File
</UL>

<P><STRONG><a name="[28e]"></a>iniparser_set</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_set))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xstrdup
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_set
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlwc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_device_password
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_value
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_sensivity
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_network
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_alarm
</UL>

<P><STRONG><a name="[28f]"></a>jump_next_device_cail_password_item</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, password_ui.o(i.jump_next_device_cail_password_item))
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_password_item
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
</UL>

<P><STRONG><a name="[236]"></a>jump_next_item</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, datetime_ui.o(i.jump_next_item))
<BR><BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_datatime_item
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_process
</UL>

<P><STRONG><a name="[1a1]"></a>jump_next_para_item</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, para_ui.o(i.jump_next_para_item))
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_para_item
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Setting_Page_Left_Key
</UL>

<P><STRONG><a name="[294]"></a>knl_idle_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tos_sys.o(i.knl_idle_init))
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[2d2]"></a>knl_is_idle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[303]"></a>knl_is_inirq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[2d4]"></a>knl_is_sched_locked</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[306]"></a>knl_is_self</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[296]"></a>knl_sched</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tos_sys.o(i.knl_sched))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[12]"></a>lcd_show_ascii_str</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_show_ascii_str))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>lcd_show_bmp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_show_bmp))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>led_off_process</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_init.o(i.led_off_process))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(CMDS)
</UL>
<P><STRONG><a name="[37]"></a>led_on_process</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_init.o(i.led_on_process))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_init.o(CMDS)
</UL>
<P><STRONG><a name="[29a]"></a>left_right_select</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, recovery_ui.o(i.left_right_select))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status2_font
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status1_font
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_process
</UL>

<P><STRONG><a name="[176]"></a>log_item_display</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, log_ui.o(i.log_item_display))
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_log_setting_page_item_font
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_page_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Long_Key
</UL>

<P><STRONG><a name="[255]"></a>log_page_init</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, log_ui.o(i.log_page_init))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_item_display
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_no_log
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_serial_number
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_result
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_log_detect_datetime
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_conf_item
</UL>

<P><STRONG><a name="[2]"></a>log_page_process</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, log_ui.o(i.log_page_process))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>$Super$$main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tencent_os
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>main_page_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main_ui.o(i.main_page_init))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_main_page_ui
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Date_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_process
</UL>

<P><STRONG><a name="[1]"></a>main_page_process</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main_ui.o(i.main_page_process))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, malloc.o(i.malloc))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadlLineData
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xstrdup
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_dumpsection_ini
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[29d]"></a>mmheap_init_with_pool</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_init_with_pool))
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[2a7]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_mutex.o(i.mutex_release))
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[2a9]"></a>network_status_display</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, para_ui.o(i.network_status_display))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_para_setting_page_status_font
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_current_select_item
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_para_item
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
</UL>

<P><STRONG><a name="[2aa]"></a>osKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.osKernelInitialize))
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tencent_os
</UL>

<P><STRONG><a name="[2ad]"></a>osKernelStart</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tencent_os
</UL>

<P><STRONG><a name="[239]"></a>osThreadCreate</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_cmsis2knl
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_tencent_os
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_task
</UL>

<P><STRONG><a name="[2b1]"></a>para_item_display</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, para_ui.o(i.para_item_display))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_status_display
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensivity_display
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_status_display
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_status_display
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_para_setting_page_status_font
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_para_setting_page_item_font
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_save_and_return_prev_page
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_setting_page_init
</UL>

<P><STRONG><a name="[1a2]"></a>para_save_and_return_prev_page</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, para_ui.o(i.para_save_and_return_prev_page))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_value
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_sensivity
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_network
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_alarm
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Setting_Page_Right_Long_Key
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Setting_Page_Left_Long_Key
</UL>

<P><STRONG><a name="[253]"></a>para_setting_page_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, para_ui.o(i.para_setting_page_init))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_setting_para_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_conf_item
</UL>

<P><STRONG><a name="[4]"></a>para_setting_page_process</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, para_ui.o(i.para_setting_page_process))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2b8]"></a>para_setting_para_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, para_ui.o(i.para_setting_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_setting_page_init
</UL>

<P><STRONG><a name="[2b9]"></a>password_input_error_display</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, password_ui.o(i.password_input_error_display))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
</UL>

<P><STRONG><a name="[2ba]"></a>password_input_item_display</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, password_ui.o(i.password_input_item_display))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
</UL>

<P><STRONG><a name="[17c]"></a>password_input_page_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, password_ui.o(i.password_input_page_init))
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_para_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_number_display
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_item_display
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Main_Page_Right_Key
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
</UL>

<P><STRONG><a name="[7]"></a>password_input_page_process</STRONG> (Thumb, 386 bytes, Stack size 0 bytes, password_ui.o(i.password_input_page_process))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_number_display
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_item_display
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_error_display
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_next_device_cail_password_item
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_main_page_data_display
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_page_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[2bc]"></a>password_number_display</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, password_ui.o(i.password_number_display))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
</UL>

<P><STRONG><a name="[254]"></a>password_page_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, password_ui.o(i.password_page_init))
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_para_init
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_number_display
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_item_display
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_conf_item
</UL>

<P><STRONG><a name="[2bb]"></a>password_page_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, password_ui.o(i.password_page_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_init
</UL>

<P><STRONG><a name="[6]"></a>password_page_process</STRONG> (Thumb, 368 bytes, Stack size 0 bytes, password_ui.o(i.password_page_process))
<BR><BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_device_password
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_encrypt_passwd
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_number_display
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_item_display
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_next_device_cail_password_item
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[309]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_pend.o(i.pend_highest_pending_prio_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[308]"></a>pend_highest_pending_task_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(i.pend_highest_pending_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[2a1]"></a>pend_is_nopending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_pend.o(i.pend_is_nopending))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[2bf]"></a>pend_list_adjust</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_pend.o(i.pend_list_adjust))
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[2c4]"></a>pend_list_remove</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tos_pend.o(i.pend_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[305]"></a>pend_object_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(i.pend_object_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[302]"></a>pend_object_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(i.pend_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create_max
</UL>

<P><STRONG><a name="[304]"></a>pend_state2errno</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tos_pend.o(i.pend_state2errno))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[2c1]"></a>pend_task_block</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_pend.o(i.pend_task_block))
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[2a4]"></a>pend_task_wakeup</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_pend.o(i.pend_task_wakeup))
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_task_recv
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[2c7]"></a>pend_wakeup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_pend.o(i.pend_wakeup))
<BR><BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>

<P><STRONG><a name="[2a8]"></a>pend_wakeup_all</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tos_pend.o(i.pend_wakeup_all))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[2c8]"></a>pend_wakeup_one</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(i.pend_wakeup_one))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[22d]"></a>port_systick_config</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port_c.o(i.port_systick_config))
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[22c]"></a>port_systick_priority_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, port_c.o(i.port_systick_priority_set))
<BR><BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[2c6]"></a>readyqueue_add</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_add))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[2cb]"></a>readyqueue_add_head</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_add_head))
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[2ca]"></a>readyqueue_add_tail</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_add_tail))
<BR><BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[2d1]"></a>readyqueue_first_task_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_first_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[298]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[2fe]"></a>readyqueue_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[2d3]"></a>readyqueue_is_prio_onlyone</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_is_prio_onlyone))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[2d5]"></a>readyqueue_move_head_to_tail</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_move_head_to_tail))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[2c2]"></a>readyqueue_remove</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_remove))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[2cd]"></a>recovery_enter_key_handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, recovery_ui.o(i.recovery_enter_key_handler))
<BR><BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status2_font
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status1_font
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_item_font
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Info_Page_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recovery_Setting
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_process
</UL>

<P><STRONG><a name="[171]"></a>recovery_page_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, recovery_ui.o(i.recovery_page_init))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status2_font
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status1_font
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_item_font
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Version_Info_Page_Left_Long_Key
</UL>

<P><STRONG><a name="[9]"></a>recovery_page_process</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, recovery_ui.o(i.recovery_page_process))
<BR><BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_right_select
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status2_font
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_status1_font
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_recovery_page_item_font
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Version_Info_Page_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[1c7]"></a>recv</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tos_at_socket.o(i.recv))
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_recv
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_set_sanity_check
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_get_fd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[2d0]"></a>robin_sched</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, tos_robin.o(i.robin_sched))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_is_prio_onlyone
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[193]"></a>sample_decode_passwd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, password_ui.o(i.sample_decode_passwd))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_System_Para
</UL>

<P><STRONG><a name="[2bd]"></a>sample_encrypt_passwd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, password_ui.o(i.sample_encrypt_passwd))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
</UL>

<P><STRONG><a name="[21d]"></a>select_conf_item</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, conf_ui.o(i.select_conf_item))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_conf_item
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_process
</UL>

<P><STRONG><a name="[291]"></a>select_datatime_item</STRONG> (Thumb, 424 bytes, Stack size 0 bytes, datetime_ui.o(i.select_datatime_item))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_next_item
</UL>

<P><STRONG><a name="[292]"></a>select_para_item</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, para_ui.o(i.select_para_item))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_status_display
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensivity_display
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_status_display
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_status_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_next_para_item
</UL>

<P><STRONG><a name="[290]"></a>select_password_item</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, password_ui.o(i.select_password_item))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jump_next_device_cail_password_item
</UL>

<P><STRONG><a name="[19f]"></a>send</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_at_socket.o(i.send))
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sal_module_send
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_set_sanity_check
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_get_fd
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneNet_Packet_Send
</UL>

<P><STRONG><a name="[2b3]"></a>sensivity_display</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, para_ui.o(i.sensivity_display))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_para_setting_page_status_font
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_current_select_item
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_para_item
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
</UL>

<P><STRONG><a name="[2b4]"></a>setting_alarm</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, para.o(i.setting_alarm))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getint
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_save_and_return_prev_page
</UL>

<P><STRONG><a name="[1a3]"></a>setting_current_select_item</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, para_ui.o(i.setting_current_select_item))
<BR><BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_status_display
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensivity_display
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_status_display
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_status_display
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Para_Setting_Page_Right_Key
</UL>

<P><STRONG><a name="[237]"></a>setting_datetime</STRONG> (Thumb, 310 bytes, Stack size 0 bytes, datetime_ui.o(i.setting_datetime))
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_day
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;datetime_page_process
</UL>

<P><STRONG><a name="[2be]"></a>setting_device_password</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, para.o(i.setting_device_password))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_page_process
</UL>

<P><STRONG><a name="[2b6]"></a>setting_network</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, para.o(i.setting_network))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getint
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_save_and_return_prev_page
</UL>

<P><STRONG><a name="[2b7]"></a>setting_sensivity</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, para.o(i.setting_sensivity))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getint
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_save_and_return_prev_page
</UL>

<P><STRONG><a name="[2b5]"></a>setting_value</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, para.o(i.setting_value))
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getint
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_save_and_return_prev_page
</UL>

<P><STRONG><a name="[1c4]"></a>socket</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tos_at_socket.o(i.socket))
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_set_protocol
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
</UL>

<P><STRONG><a name="[218]"></a>socket_get_fd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_at_socket_prv.o(i.socket_get_fd))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[221]"></a>socket_get_protocol</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_at_socket_prv.o(i.socket_get_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[2d9]"></a>socket_id_alloc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_at_socket_prv.o(i.socket_id_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[21a]"></a>socket_id_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_at_socket_prv.o(i.socket_id_free))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[216]"></a>socket_id_sanity_check</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_at_socket_prv.o(i.socket_id_sanity_check))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_set_sanity_check
</UL>

<P><STRONG><a name="[217]"></a>socket_id_set_sanity_check</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_at_socket_prv.o(i.socket_id_set_sanity_check))
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_id_sanity_check
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[223]"></a>socket_set_fd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_at_socket_prv.o(i.socket_set_fd))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[2da]"></a>socket_set_protocol</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_at_socket_prv.o(i.socket_set_protocol))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[29c]"></a>start_tencent_os</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_init.o(i.start_tencent_os))
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[293]"></a>task_free_all</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_task.o(i.task_free_all))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>

<P><STRONG><a name="[2c3]"></a>tick_list_add</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_tick.o(i.tick_list_add))
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[2c5]"></a>tick_list_remove</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tos_tick.o(i.tick_list_remove))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[2e4]"></a>tick_update</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, tos_tick.o(i.tick_update))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[259]"></a>tos_at_channel_alloc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_channel_alloc))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
</UL>

<P><STRONG><a name="[257]"></a>tos_at_channel_free</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_channel_free))
<BR><BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
</UL>

<P><STRONG><a name="[266]"></a>tos_at_channel_is_working</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_channel_is_working))
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[262]"></a>tos_at_channel_read_timed</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_channel_read_timed))
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_remain
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_is_expired
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_countdown
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recvfrom_timeout
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recvfrom
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv_timeout
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_recv
</UL>

<P><STRONG><a name="[268]"></a>tos_at_channel_set_broken</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_channel_set_broken))
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[25e]"></a>tos_at_channel_write</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_channel_write))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_incoming_data_process
</UL>

<P><STRONG><a name="[256]"></a>tos_at_cmd_exec</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_cmd_exec))
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_attach
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_mode_set
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_multilink_set
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_close
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_close
</UL>

<P><STRONG><a name="[25b]"></a>tos_at_cmd_exec_until</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_cmd_exec_until))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_attach
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_join_ap
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
</UL>

<P><STRONG><a name="[25a]"></a>tos_at_echo_create</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_echo_create))
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_join_ap
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_mode_set
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_multilink_set
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_close
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
</UL>

<P><STRONG><a name="[267]"></a>tos_at_global_lock_pend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_global_lock_pend))
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[269]"></a>tos_at_global_lock_post</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_global_lock_post))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[263]"></a>tos_at_init</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_init))
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_create
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_deinit
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_deinit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sal_init
</UL>

<P><STRONG><a name="[26a]"></a>tos_at_raw_data_send_until</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_raw_data_send_until))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_create
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_echo_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[169]"></a>tos_at_uart_input_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_uart_input_byte))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[25d]"></a>tos_at_uart_read</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tos_at.o(i.tos_at_uart_read))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_incoming_data_process
</UL>

<P><STRONG><a name="[1f2]"></a>tos_chr_fifo_create</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tos_char_fifo.o(i.tos_chr_fifo_create))
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
</UL>

<P><STRONG><a name="[2e7]"></a>tos_chr_fifo_destroy</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_char_fifo.o(i.tos_chr_fifo_destroy))
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[200]"></a>tos_chr_fifo_pop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tos_char_fifo.o(i.tos_chr_fifo_pop))
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>

<P><STRONG><a name="[2ec]"></a>tos_chr_fifo_pop_stream</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tos_char_fifo.o(i.tos_chr_fifo_pop_stream))
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[2f6]"></a>tos_chr_fifo_push</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_char_fifo.o(i.tos_chr_fifo_push))
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_input_byte
</UL>

<P><STRONG><a name="[2ee]"></a>tos_chr_fifo_push_stream</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tos_char_fifo.o(i.tos_chr_fifo_push_stream))
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
</UL>

<P><STRONG><a name="[1e0]"></a>tos_cpu_clz</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.tos_cpu_clz))
<BR><BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[299]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.tos_cpu_cpsr_restore))
<BR><BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[297]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.tos_cpu_cpsr_save))
<BR><BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_destroy
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[2f5]"></a>tos_hal_uart_deinit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tos_hal_uart.o(i.tos_hal_uart_deinit))
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[2f4]"></a>tos_hal_uart_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tos_hal_uart.o(i.tos_hal_uart_init))
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_recv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[2fd]"></a>tos_hal_uart_recv_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_hal_uart.o(i.tos_hal_uart_recv_init))
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_init
</UL>

<P><STRONG><a name="[201]"></a>tos_hal_uart_write</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tos_hal_uart.o(i.tos_hal_uart_write))
<BR><BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
</UL>

<P><STRONG><a name="[2ab]"></a>tos_knl_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_init))
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1d0]"></a>tos_knl_irq_enter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_irq_enter))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d2]"></a>tos_knl_irq_leave</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_irq_leave))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[16b]"></a>tos_knl_is_running</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[178]"></a>tos_knl_sched_lock</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_sched_lock))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Main_Page_Right_Key
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowCharStr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorRect
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_task
</UL>

<P><STRONG><a name="[17d]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_sched_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Para_Save_Process
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Main_Page_Right_Key
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_show_bmp
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChinese
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowCharStr
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorRect
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_task
</UL>

<P><STRONG><a name="[2ae]"></a>tos_knl_start</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_start))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[2e8]"></a>tos_millisec2tick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_time.o(i.tos_millisec2tick))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_ms
</UL>

<P><STRONG><a name="[1ef]"></a>tos_mmheap_alloc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_mmheap.o(i.tos_mmheap_alloc))
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
</UL>

<P><STRONG><a name="[300]"></a>tos_mmheap_calloc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tos_mmheap.o(i.tos_mmheap_calloc))
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
</UL>

<P><STRONG><a name="[1f1]"></a>tos_mmheap_free</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_mmheap.o(i.tos_mmheap_free))
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_cache_deinit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>

<P><STRONG><a name="[29f]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, tos_mmheap.o(i.tos_mmheap_pool_add))
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[238]"></a>tos_msg_q_create</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tos_message_queue.o(i.tos_msg_q_create))
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_create
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_task
</UL>

<P><STRONG><a name="[1cd]"></a>tos_msg_q_pend</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, tos_message_queue.o(i.tos_msg_q_pend))
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_formaldehyde_sensor_value
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUartRecvTask
</UL>

<P><STRONG><a name="[16c]"></a>tos_msg_q_post</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_message_queue.o(i.tos_msg_q_post))
<BR><BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1f0]"></a>tos_mutex_create</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tos_mutex.o(i.tos_mutex_create))
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_channel_construct
</UL>

<P><STRONG><a name="[2e6]"></a>tos_mutex_destroy</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tos_mutex.o(i.tos_mutex_destroy))
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[1f4]"></a>tos_mutex_pend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mutex.o(i.tos_mutex_pend))
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_pend
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>

<P><STRONG><a name="[2eb]"></a>tos_mutex_pend_timed</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, tos_mutex.o(i.tos_mutex_pend_timed))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[1f7]"></a>tos_mutex_post</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, tos_mutex.o(i.tos_mutex_post))
<BR><BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_task_get
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_post
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>

<P><STRONG><a name="[2f7]"></a>tos_ring_q_create</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tos_ring_queue.o(i.tos_ring_q_create))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_create
</UL>

<P><STRONG><a name="[2f9]"></a>tos_ring_q_dequeue</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, tos_ring_queue.o(i.tos_ring_q_dequeue))
<BR><BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_empty
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_pend
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop_stream
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
</UL>

<P><STRONG><a name="[2f8]"></a>tos_ring_q_destroy</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tos_ring_queue.o(i.tos_ring_q_destroy))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_destroy
</UL>

<P><STRONG><a name="[2a2]"></a>tos_ring_q_enqueue</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, tos_ring_queue.o(i.tos_ring_q_enqueue))
<BR><BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_is_full
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push_stream
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_push
</UL>

<P><STRONG><a name="[30a]"></a>tos_ring_q_is_empty</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tos_ring_queue.o(i.tos_ring_q_is_empty))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_dequeue
</UL>

<P><STRONG><a name="[30b]"></a>tos_ring_q_is_full</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tos_ring_queue.o(i.tos_ring_q_is_full))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
</UL>

<P><STRONG><a name="[219]"></a>tos_sal_module_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sal_module_wrapper.o(i.tos_sal_module_close))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[222]"></a>tos_sal_module_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sal_module_wrapper.o(i.tos_sal_module_connect))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[265]"></a>tos_sal_module_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sal_module_wrapper.o(i.tos_sal_module_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sal_init
</UL>

<P><STRONG><a name="[2cf]"></a>tos_sal_module_recv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sal_module_wrapper.o(i.tos_sal_module_recv))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[264]"></a>tos_sal_module_register</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sal_module_wrapper.o(i.tos_sal_module_register))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sal_init
</UL>

<P><STRONG><a name="[2d7]"></a>tos_sal_module_send</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sal_module_wrapper.o(i.tos_sal_module_send))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[2f1]"></a>tos_sem_create</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_sem.o(i.tos_sem_create))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
</UL>

<P><STRONG><a name="[30c]"></a>tos_sem_create_max</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tos_sem.o(i.tos_sem_create_max), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
</UL>

<P><STRONG><a name="[2f2]"></a>tos_sem_destroy</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, tos_sem.o(i.tos_sem_destroy))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
</UL>

<P><STRONG><a name="[1ff]"></a>tos_sem_pend</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, tos_sem.o(i.tos_sem_pend))
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>

<P><STRONG><a name="[1fb]"></a>tos_sem_post</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sem.o(i.tos_sem_post))
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_do_post
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_input_byte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[1bf]"></a>tos_sleep_ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_time.o(i.tos_sleep_ms))
<BR><BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartStatus_Bar_Task
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartNetWorkTask
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartKeyTask
</UL>

<P><STRONG><a name="[2e9]"></a>tos_stopwatch_countdown</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tos_stopwatch.o(i.tos_stopwatch_countdown))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[2f3]"></a>tos_stopwatch_create</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tos_stopwatch.o(i.tos_stopwatch_create))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[1fe]"></a>tos_stopwatch_delay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tos_stopwatch.o(i.tos_stopwatch_delay))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
</UL>

<P><STRONG><a name="[2ed]"></a>tos_stopwatch_is_expired</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_stopwatch.o(i.tos_stopwatch_is_expired))
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_remain
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[2ea]"></a>tos_stopwatch_remain</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tos_stopwatch.o(i.tos_stopwatch_remain))
<BR><BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_is_expired
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_systick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>

<P><STRONG><a name="[30d]"></a>tos_systick_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tos_time.o(i.tos_systick_get))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_remain
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_is_expired
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_delay
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_countdown
</UL>

<P><STRONG><a name="[295]"></a>tos_task_create</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, tos_task.o(i.tos_task_create))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>

<P><STRONG><a name="[2b0]"></a>tos_task_create_dyn</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, tos_task.o(i.tos_task_create_dyn))
<BR><BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[2f0]"></a>tos_task_delay</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, tos_task.o(i.tos_task_delay))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sleep_ms
</UL>

<P><STRONG><a name="[2e0]"></a>tos_task_destroy</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, tos_task.o(i.tos_task_destroy))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
</UL>

<P><STRONG><a name="[2a6]"></a>tos_task_prio_change</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, tos_task.o(i.tos_task_prio_change))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[310]"></a>tos_task_yield</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tos_task.o(i.tos_task_yield))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[1d1]"></a>tos_tick_handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tos_tick.o(i.tos_tick_handler))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[21e]"></a>update_main_page_data_display</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main_ui.o(i.update_main_page_data_display))
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_work_status
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_tecent_logo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time_font
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_value
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_unit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_min_value
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_hcho_max_value
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_process
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_process
</UL>

<P><STRONG><a name="[2b2]"></a>value_status_display</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, para_ui.o(i.value_status_display))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_para_setting_page_status_font
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_current_select_item
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_para_item
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
</UL>

<P><STRONG><a name="[5]"></a>version_info_page_process</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, version_info_ui.o(i.version_info_page_process))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.data)
</UL>
<P><STRONG><a name="[241]"></a>xstrdup</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dictionary.o(i.xstrdup))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_set
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getstring
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[105]"></a>LL_ADC_GetOffsetChannel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_GetOffsetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[103]"></a>LL_ADC_INJ_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_INJ_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[102]"></a>LL_ADC_REG_IsConversionOngoing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_REG_IsConversionOngoing))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[104]"></a>LL_ADC_SetChannelSamplingTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_SetChannelSamplingTime))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[106]"></a>LL_ADC_SetOffsetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.LL_ADC_SetOffsetState))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[11d]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[115]"></a>RCCEx_GetSAIxPeriphCLKFreq</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_GetSAIxPeriphCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[11a]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[10c]"></a>DMA_SetConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[113]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[8e]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[91]"></a>UART_DMAError</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[8f]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[90]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[155]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[154]"></a>UART_EndTxTransfer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[93]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[92]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[8d]"></a>SD_DMARxAbort</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[8c]"></a>SD_DMATxAbort</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[138]"></a>SD_InitCard</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.SD_InitCard))
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[137]"></a>SD_PowerON</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, stm32l4xx_hal_sd.o(i.SD_PowerON))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[149]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14b]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14c]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14d]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14e]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[28b]"></a>iniparser_line</STRONG> (Thumb, 396 bytes, Stack size 0 bytes, iniparser.o(i.iniparser_line))
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstrip
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlwc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_load
</UL>

<P><STRONG><a name="[28a]"></a>strlwc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iniparser.o(i.strlwc))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getstring
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
</UL>

<P><STRONG><a name="[28d]"></a>strstrip</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, iniparser.o(i.strstrip))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_line
</UL>

<P><STRONG><a name="[240]"></a>mem_double</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, dictionary.o(i.mem_double))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dictionary_set
</UL>

<P><STRONG><a name="[185]"></a>LCD_GPIO_Init</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_GPIO_Init))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[182]"></a>LCD_SPI_Send</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.LCD_SPI_Send))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_2Byte
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Show_Image
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_ColorLine
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[186]"></a>st7789_run_cfg_script</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lcd_spi2_drv.o(i.st7789_run_cfg_script))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1e5]"></a>_cmd_hash</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cmd.o(i._cmd_hash))
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_to_lower
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parsing
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_init
</UL>

<P><STRONG><a name="[1e6]"></a>_cmd_to_lower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmd.o(i._cmd_to_lower))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parsing
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cmd_hash
</UL>

<P><STRONG><a name="[1e9]"></a>_get_next_cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cmd.o(i._get_next_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parsing
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list
</UL>

<P><STRONG><a name="[35]"></a>_list</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cmd.o(i._list))
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_next_cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(CMDS)
</UL>
<P><STRONG><a name="[b]"></a>lcd_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_clear))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>lcd_display_onoff</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_display_onoff))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>lcd_draw_line</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_draw_line))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>lcd_draw_rect</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_draw_rect))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>lcd_fill</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_fill))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>lcd_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_init))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>lcd_show_chinese_str</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_show_chinese_str))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>lcd_show_image</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lcd_driver.o(i.lcd_show_image))
<BR>[Address Reference Count : 1]<UL><LI> lcd_driver.o(.data)
</UL>
<P><STRONG><a name="[29b]"></a>Display_log_setting_page_item_font</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, log_ui.o(i.Display_log_setting_page_item_font))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_item_display
</UL>

<P><STRONG><a name="[174]"></a>display_log_detect_datetime</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, log_ui.o(i.display_log_detect_datetime))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_page_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Long_Key
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Key
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Left_Key
</UL>

<P><STRONG><a name="[175]"></a>display_log_detect_result</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, log_ui.o(i.display_log_detect_result))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_page_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Long_Key
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Key
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Left_Key
</UL>

<P><STRONG><a name="[173]"></a>display_log_serial_number</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, log_ui.o(i.display_log_serial_number))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_page_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Long_Key
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Right_Key
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handler_Log_Page_Left_Key
</UL>

<P><STRONG><a name="[f0]"></a>Display_para_setting_page_item_font</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, para_ui.o(i.Display_para_setting_page_item_font))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
</UL>

<P><STRONG><a name="[f2]"></a>Display_para_setting_page_status_font</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, para_ui.o(i.Display_para_setting_page_status_font))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_status_display
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensivity_display
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;para_item_display
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_status_display
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_status_display
</UL>

<P><STRONG><a name="[25]"></a>Handler_Main_Page_Right_Key</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main_ui.o(i.Handler_Main_Page_Right_Key))
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;password_input_page_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time_font
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_runing_time
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_main_page_ui
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main_ui.o(.data)
</UL>
<P><STRONG><a name="[2d8]"></a>cal_day</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, datetime_ui.o(i.cal_day))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_datetime
</UL>

<P><STRONG><a name="[f3]"></a>Display_recovery_page_item_font</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, recovery_ui.o(i.Display_recovery_page_item_font))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_process
</UL>

<P><STRONG><a name="[f5]"></a>Display_recovery_page_status1_font</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, recovery_ui.o(i.Display_recovery_page_status1_font))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_right_select
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_process
</UL>

<P><STRONG><a name="[f6]"></a>Display_recovery_page_status2_font</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, recovery_ui.o(i.Display_recovery_page_status2_font))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_menu_color_item
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_enter_key_handler
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;left_right_select
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_process
</UL>

<P><STRONG><a name="[26]"></a>Handle_Version_Info_Page_Left_Key</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, version_info_ui.o(i.Handle_Version_Info_Page_Left_Key))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_version_info
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> version_info_ui.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>Handle_Version_Info_Page_Left_Long_Key</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, version_info_ui.o(i.Handle_Version_Info_Page_Left_Long_Key))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_version_info
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery_page_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> version_info_ui.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>Handle_Version_Info_Page_Right_Key</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, version_info_ui.o(i.Handle_Version_Info_Page_Right_Key))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_version_info
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_page_ui_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> version_info_ui.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>Create_Default_InI_File</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, para.o(i.Create_Default_InI_File))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Config_ini_File
</UL>

<P><STRONG><a name="[18f]"></a>Load_System_Para</STRONG> (Thumb, 770 bytes, Stack size 0 bytes, para.o(i.Load_System_Para))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_decode_passwd
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getstring
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getint
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iniparser_getdouble
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Config_ini_File
</UL>

<P><STRONG><a name="[1ba]"></a>SD_CheckStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_CheckStatus))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[210]"></a>check_fs</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, ff.o(i.check_fs))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[233]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[275]"></a>chk_lock</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ff.o(i.chk_lock))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[272]"></a>clear_lock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ff.o(i.clear_lock))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[26e]"></a>clmt_clust</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[247]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[21b]"></a>cmp_lfn</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[22e]"></a>create_chain</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, ff.o(i.create_chain))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[231]"></a>create_name</STRONG> (Thumb, 560 bytes, Stack size 0 bytes, ff.o(i.create_name))
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[26d]"></a>dec_lock</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ff.o(i.dec_lock))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[242]"></a>dir_find</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, ff.o(i.dir_find))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[245]"></a>dir_next</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, ff.o(i.dir_next))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[248]"></a>dir_read</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, ff.o(i.dir_read))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[24a]"></a>dir_register</STRONG> (Thumb, 480 bytes, Stack size 0 bytes, ff.o(i.dir_register))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[24e]"></a>dir_remove</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ff.o(i.dir_remove))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[243]"></a>dir_sdi</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, ff.o(i.dir_sdi))
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[273]"></a>find_volume</STRONG> (Thumb, 582 bytes, Stack size 0 bytes, ff.o(i.find_volume))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[274]"></a>follow_path</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, ff.o(i.follow_path))
<BR><BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[24c]"></a>gen_numname</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ff.o(i.gen_numname))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[22f]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, ff.o(i.get_fat))
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[271]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[27b]"></a>inc_lock</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, ff.o(i.inc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[278]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[213]"></a>ld_dword</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[212]"></a>ld_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[24b]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[234]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[211]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ff.o(i.move_window))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[249]"></a>pick_lfn</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, ff.o(i.pick_lfn))
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[230]"></a>put_fat</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, ff.o(i.put_fat))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[27c]"></a>putc_bfd</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ff.o(i.putc_bfd))
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[27d]"></a>putc_flush</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ff.o(i.putc_flush))
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_printf
</UL>

<P><STRONG><a name="[27a]"></a>remove_chain</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, ff.o(i.remove_chain))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[279]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[277]"></a>st_dword</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[24d]"></a>st_word</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[244]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[27e]"></a>sync_fs</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, ff.o(i.sync_fs))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[246]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ff.o(i.sync_window))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[26c]"></a>validate</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ff.o(i.validate))
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[1ee]"></a>at_channel_construct</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tos_at.o(i.at_channel_construct))
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_create
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_alloc
</UL>

<P><STRONG><a name="[2e5]"></a>at_channel_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tos_at.o(i.at_channel_get))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_set_broken
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_is_working
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>

<P><STRONG><a name="[1f3]"></a>at_cmd_do_exec</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tos_at.o(i.at_cmd_do_exec))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>

<P><STRONG><a name="[2ef]"></a>at_echo_attach</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_at.o(i.at_echo_attach))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>

<P><STRONG><a name="[1f8]"></a>at_get_event</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tos_at.o(i.at_get_event))
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[98]"></a>at_parser</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, tos_at.o(i.at_parser))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_at.o(i.tos_at_init)
</UL>
<P><STRONG><a name="[1fc]"></a>at_recv_cache_deinit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_at.o(i.at_recv_cache_deinit))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_init
</UL>

<P><STRONG><a name="[1fd]"></a>at_uart_getchar</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tos_at.o(i.at_uart_getchar))
<BR><BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_stopwatch_delay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_pend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_chr_fifo_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_read
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_line_parse
</UL>

<P><STRONG><a name="[1fa]"></a>at_uart_line_parse</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, tos_at.o(i.at_uart_line_parse))
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_getchar
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_event
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parser
</UL>

<P><STRONG><a name="[1f6]"></a>at_uart_send</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tos_at.o(i.at_uart_send))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_hal_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_cmd_do_exec
</UL>

<P><STRONG><a name="[2c9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port_c.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[2a0]"></a>msg_q_do_post</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, tos_message_queue.o(i.msg_q_do_post))
<BR><BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_task_recv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_ring_q_enqueue
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_msg_q_post
</UL>

<P><STRONG><a name="[2a3]"></a>msg_q_task_recv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_message_queue.o(i.msg_q_task_recv))
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_q_do_post
</UL>

<P><STRONG><a name="[1df]"></a>__ffs</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_mmheap.o(i.__ffs))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[1e1]"></a>__fls</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(i.__fls))
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[2ff]"></a>adjust_request_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_mmheap.o(i.adjust_request_size))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[202]"></a>blk_absorb</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_absorb))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[20e]"></a>blk_can_split</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_can_split))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[204]"></a>blk_insert</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_insert))
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[203]"></a>blk_link_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_link_next))
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[207]"></a>blk_locate_free</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_locate_free))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[209]"></a>blk_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_mark_as_free))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[20a]"></a>blk_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_mark_as_used))
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[20b]"></a>blk_merge_next</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_merge_next))
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[206]"></a>blk_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_next))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[20d]"></a>blk_prepare_used</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_prepare_used))
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[20c]"></a>blk_remove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_remove))
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[20f]"></a>blk_split</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_split))
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[205]"></a>mapping_insert</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tos_mmheap.o(i.mapping_insert))
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[29e]"></a>mmheap_ctl_init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_ctl_init))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[301]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[208]"></a>remove_free_block</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, tos_mmheap.o(i.remove_free_block))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[307]"></a>mutex_fresh_owner_mark</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tos_mutex.o(i.mutex_fresh_owner_mark))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[2a5]"></a>mutex_old_owner_release</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tos_mutex.o(i.mutex_old_owner_release))
<BR><BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[2c0]"></a>pend_list_add</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tos_pend.o(i.pend_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[2cc]"></a>readyqueue_prio_mark</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_prio_mark))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[2d6]"></a>sem_do_post</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, tos_sem.o(i.sem_do_post))
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_sem_post
</UL>

<P><STRONG><a name="[97]"></a>knl_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(i.knl_idle_entry))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(i.knl_idle_init)
</UL>
<P><STRONG><a name="[2de]"></a>task_do_destroy</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, tos_task.o(i.task_do_destroy))
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[99]"></a>task_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(i.task_exit))
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(i.tos_task_create)
</UL>
<P><STRONG><a name="[2e1]"></a>task_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tos_task.o(i.task_free))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[2df]"></a>task_reset</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tos_task.o(i.task_reset))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[2e2]"></a>tick_task_place</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, tos_tick.o(i.tick_task_place))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[2e3]"></a>tos_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_tick.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[34]"></a>esp8266_close</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_close))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>esp8266_connect</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_connect))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec_until
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_alloc
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[25c]"></a>esp8266_echo_close</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_echo_close))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[2a]"></a>esp8266_incoming_data_process</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_incoming_data_process))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_uart_read
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>esp8266_init</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_init))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_net_mode_set
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_multilink_set
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_close
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[261]"></a>esp8266_is_link_broken</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_is_link_broken))
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_sendto
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_send
</UL>

<P><STRONG><a name="[260]"></a>esp8266_multilink_set</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_multilink_set))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[25f]"></a>esp8266_net_mode_set</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_net_mode_set))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_init
</UL>

<P><STRONG><a name="[2c]"></a>esp8266_parse_domain</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_parse_domain))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_reconnect_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[258]"></a>esp8266_reconnect_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_reconnect_init))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_multilink_set
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_echo_close
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_parse_domain
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_connect
</UL>

<P><STRONG><a name="[30]"></a>esp8266_recv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_recv))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>esp8266_recv_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_recv_timeout))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>esp8266_recvfrom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_recvfrom))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>esp8266_recvfrom_timeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_recvfrom_timeout))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_read_timed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>esp8266_send</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_send))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_post
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_pend
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_set_broken
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_is_working
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_is_link_broken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>esp8266_sendto</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, esp8266.o(i.esp8266_sendto))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_raw_data_send_until
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_post
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_global_lock_pend
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_echo_create
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_cmd_exec
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_set_broken
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_at_channel_is_working
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_is_link_broken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> esp8266.o(.data)
</UL>
<P><STRONG><a name="[2ac]"></a>errno_knl2cmsis</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(i.errno_knl2cmsis))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[2af]"></a>priority_cmsis2knl</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(i.priority_cmsis2knl))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1e7]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 0 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1da]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 0 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf
</UL>

<P><STRONG><a name="[1eb]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ea]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[95]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[96]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[8a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, strtod.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[c9]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
